#!/usr/bin/env python
import argparse
import sys
import os
from amdtk import readCTM
from amdtk import writeEval2Clusters


class OffsetFromSegmentFile:
    def __init__(self, segments_file, file_transform):
        self.file_transform = file_transform
        with open(segments_file) as fp:
            self.segments_offset = dict()
            for line in fp:
                file, start, end = line.split()
                self.segments_offset[file] = float(start)
                
    def __call__(self, file):
        return self.segments_offset[self.file_transform(file)]


def safe_open(filename, sys_file, mode):
    if filename == '-':
        file_handle = sys_file
    else:
        try:
            file_handle = open(filename, mode)
        except OSError:
            sys.exit(filename + " file not found!")
    return file_handle


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('ctmfile', metavar='CTMFILE', type=str, default='-',
                        nargs='?',
                        help=('The ctm lattice file to be converted. '
                              'default: stdin'))
    parser.add_argument('outfile', metavar='OUTFILE', type=str, default='-',
                        nargs='?',
                        help=('The output eval2 cluster file to be created. '
                              'default: stdout'))
    parser.add_argument('-s', '--segments_file',
                        help='Segments file with timing offset information')
    parser.add_argument('--write_sequence', action='store_true',
                        help='Add discovered sequence as cluster label')
    args = parser.parse_args()

    file_transform = lambda filename: filename.split('.')[0]

    offset = None
    if args.segments_file is not None:
        offset = OffsetFromSegmentFile(args.segments_file, file_transform)

    with safe_open(args.ctmfile, sys.stdin, 'r') as ctmfile:
        ctm = readCTM(ctmfile, file_transform=file_transform,
                      blacklist=('</s>',),
                      offset_from_filename=offset)

    with safe_open(args.outfile, sys.stdout, 'w') as outfile:
        writeEval2Clusters(ctm, outfile, write_sequence=args.write_sequence)


if __name__ == '__main__':
    main()
